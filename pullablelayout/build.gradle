apply plugin: 'com.android.library'
apply from: 'gradle.properties'

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION
    resourcePrefix RESOURCE_PREFIX

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode VERSION_CODE
        versionName VERSION_NAME
    }
    android {
        lintOptions {
            abortOnError false
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

apply plugin: 'com.jfrog.bintray'

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile APP_COMPAT
    compile RECYCLER_VIEW
}

def siteUrl = 'https://github.com/zongren/PullableLayout'
def gitUrl = 'https://github.com/zongren/PullableLayout.git'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("BINTRAY_USER")
    key = properties.getProperty("BINTRAY_API_KEY")

    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "PullableLayout"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["MIT"]
        publish = true
    }
}

apply plugin: 'com.github.dcendents.android-maven'

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'

                name 'PullableLayout makes it easy to add the pull-to-load feature to your app.'
                url siteUrl

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'https://github.com/zongren/PullableLayout/blob/master/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        id 'zongren'
                        name 'zongren'
                        email 'zongren@live.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
